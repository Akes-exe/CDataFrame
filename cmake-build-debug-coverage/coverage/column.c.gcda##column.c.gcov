        -:    0:Source:C:/Users/maxco/OneDrive/Bureau/l1/C tuto/Project C/CDataFrame/CDataFrame/column.c
        -:    0:Graph:C:\Users\maxco\OneDrive\Bureau\l1\C tuto\Project C\CDataFrame\CDataFrame\cmake-build-debug-coverage\CMakeFiles\CDataFrame.dir\column.c.gcno
        -:    0:Data:C:\Users\maxco\OneDrive\Bureau\l1\C tuto\Project C\CDataFrame\CDataFrame\cmake-build-debug-coverage\CMakeFiles\CDataFrame.dir\column.c.gcda
        -:    0:Runs:1
        -:    1:#include "column.h"
        -:    2:#include "sort.h"
        -:    3:#include <stdio.h>
        -:    4:#include <string.h>
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7:#define REALOC_SIZE 256
        -:    8:
function create_column called 5 returned 100% blocks executed 100%
        5:    9:COLUMN *create_column(char* title) {
        5:   10:    COLUMN* column = (COLUMN *)malloc(sizeof(COLUMN));
        5:   11:    strcpy(column->title, title); // copy title
        5:   12:    column->TP = REALOC_SIZE;
        5:   13:    column->TL = 0;
        5:   14:    column->data = NULL; // initialize members of the structure
        5:   15:    return column;
        5:   15-block  0
        -:   16:};
        -:   17:
function insert_value called 20 returned 100% blocks executed 62%
       20:   18:int insert_value(COLUMN* col, int value){
       20:   19:    if(col->TL >= col->TP) {
       20:   19-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####:   20:        col->data = (int *)realloc(col->data, sizeof(int)); // if TL > TP reallocate memory
    #####:   21:        if (col->data == NULL) {
    %%%%%:   21-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   22:            return 0;
    %%%%%:   22-block  0
        -:   23:        }
        -:   24:    }
       20:   25:    if(col->data == NULL) {
       20:   25-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 15
        5:   26:        col->data = (int *)malloc(sizeof(int)); // allocate memory for the first value
        5:   27:        if (col->data == NULL) {
        5:   27-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:   28:            return 0;
    %%%%%:   28-block  0
        -:   29:        }
        -:   30:    }
       20:   31:    col->data[col->TL] = value; //assign the value to the next available position
       20:   32:    col->TL++; // increase the TL by 1 since +1 value
       20:   33:    return 1;
       20:   33-block  0
        -:   34:};
        -:   35:
function insert_value_at_position called 0 returned 0% blocks executed 0%
    #####:   36:int insert_value_at_position(COLUMN* col, int value, int position){
        -:   37:    int i;
    #####:   38:    if (position == -1)
    %%%%%:   38-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   39:        position = col->TL;//  will insert the value at the last index
    %%%%%:   39-block  0
    #####:   40:    if(col->TL >= col->TP) {
    %%%%%:   40-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   41:        col->data = (int *)realloc(col->data, sizeof(int)); // reallocate memory
    #####:   42:        if (col->data == NULL) {
    %%%%%:   42-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   43:            return 0;
    %%%%%:   43-block  0
        -:   44:        }
        -:   45:    }
    #####:   46:    if(col->data == NULL) {
    %%%%%:   46-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   47:        col->data = (int *)malloc(sizeof(int));
    #####:   48:        if (col->data == NULL) {
    %%%%%:   48-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   49:            return 0;
    %%%%%:   49-block  0
        -:   50:        }
        -:   51:    }
    #####:   52:    position++;
    #####:   53:    if (position > col->TL + 1) // for out of range
    %%%%%:   53-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   54:        return 0;
    %%%%%:   54-block  0
    #####:   55:    col->TL++;
    #####:   56:    for (i = col->TL - 1; i >= position; i--) { // shift element to make place for the new value
    %%%%%:   56-block  0
    %%%%%:   56-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   57:        col->data[i] = col->data[i - 1];
    %%%%%:   57-block  0
        -:   58:    };
    #####:   59:    col->data[i] = value;
    #####:   60:    col->data[col->TL] = value; // insert value
    #####:   61:    return 1;
    %%%%%:   61-block  0
        -:   62:};
        -:   63:
function delete_value_at_position called 0 returned 0% blocks executed 0%
    #####:   64:int delete_value_at_position(COLUMN* col, int position){
        -:   65:    int i;
    #####:   66:    if (position == -1)
    %%%%%:   66-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   67:        position = col->TL;
    %%%%%:   67-block  0
    #####:   68:    if (position > col->TL + 1) // if bigger than LS then false
    %%%%%:   68-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   69:        return 0;
    %%%%%:   69-block  0
    #####:   70:    for (i = position; i < col->TL; i++) { // travel trough the data until find position
    %%%%%:   70-block  0
    %%%%%:   70-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   71:        col->data[i] = col->data[i + 1]; //remove it by changing it to the next one
    %%%%%:   71-block  0
        -:   72:    };
    #####:   73:    col->TL--; // since remove TL is minus one
    #####:   74:    return 1;
    %%%%%:   74-block  0
        -:   75:};
        -:   76:
function delete_column called 0 returned 0% blocks executed 0%
    #####:   77:void delete_column(COLUMN **col){ // understand
    #####:   78:    free((*col)->data);
    #####:   79:    free(*col);
    #####:   80:};
        -:   81:
function print_col called 0 returned 0% blocks executed 0%
    #####:   82:void print_col(COLUMN* col){ // understand 
    #####:   83:    for (int i = 0; i < col->TL; i++) {
    %%%%%:   83-block  0
    %%%%%:   83-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   84:        printf("[%d] %d", i, col->data[i]); // print every elem in a for loop
    %%%%%:   84-block  0
call    0 never executed
    #####:   85:        printf("\n");
call    0 never executed
        -:   86:    }
    #####:   87:};
        -:   88:
function count_occ called 0 returned 0% blocks executed 0%
    #####:   89:int count_occ(COLUMN *col, int x) {
    #####:   90:    if (!col)
    %%%%%:   90-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   91:        return 0;
    %%%%%:   91-block  0
        -:   92:
    #####:   93:    int count = 0;
    #####:   94:    for (int i = 0; i < col->TL; i++) {
    %%%%%:   94-block  0
    %%%%%:   94-block  1
    %%%%%:   94-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   95:        if (col->data[i] == x) // if i == x then +1
    %%%%%:   95-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   96:            count++;
    %%%%%:   96-block  0
        -:   97:    }
    #####:   98:    return count; // return occ
    %%%%%:   98-block  0
        -:   99:}
        -:  100:
function positionval called 0 returned 0% blocks executed 0%
    #####:  101:int positionval(COLUMN *col, int x) {
    #####:  102:    if (!col || x < 0 || x >= col->TL)
    %%%%%:  102-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  102-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  102-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:  103:        return -1; // meaning a error
    %%%%%:  103-block  0
        -:  104:
    #####:  105:    return col->data[x];
    %%%%%:  105-block  0
        -:  106:}
        -:  107:
function valuegreater called 0 returned 0% blocks executed 0%
    #####:  108:int valuegreater(COLUMN *col, int x) { // no need to explain
    #####:  109:    if (!col)
    %%%%%:  109-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  110:        return 0;
    %%%%%:  110-block  0
        -:  111:
    #####:  112:    int count = 0;
    #####:  113:    for (int i = 0; i < col->TL; i++) {
    %%%%%:  113-block  0
    %%%%%:  113-block  1
    %%%%%:  113-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  114:        if (col->data[i] > x)
    %%%%%:  114-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  115:            count++;
    %%%%%:  115-block  0
        -:  116:    }
    #####:  117:    return count;
    %%%%%:  117-block  0
        -:  118:}
        -:  119:
function valueless called 0 returned 0% blocks executed 0%
    #####:  120:int valueless(COLUMN *col, int x) { // same as value greater
    #####:  121:    if (!col)
    %%%%%:  121-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  122:        return 0;
    %%%%%:  122-block  0
        -:  123:
    #####:  124:    int count = 0;
    #####:  125:    for (int i = 0; i < col->TL; i++) {
    %%%%%:  125-block  0
    %%%%%:  125-block  1
    %%%%%:  125-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  126:        if (col->data[i] < x)
    %%%%%:  126-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  127:            count++;
    %%%%%:  127-block  0
        -:  128:    }
    #####:  129:    return count;
    %%%%%:  129-block  0
        -:  130:}
        -:  131:
function valuequal called 0 returned 0% blocks executed 0%
    #####:  132:int valuequal(COLUMN *col, int x) { // same as the two previous one just sign = changing
    #####:  133:    if (!col)
    %%%%%:  133-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  134:        return 0;
    %%%%%:  134-block  0
        -:  135:
    #####:  136:    int count = 0;
    #####:  137:    for (int i = 0; i < col->TL; i++) {
    %%%%%:  137-block  0
    %%%%%:  137-block  1
    %%%%%:  137-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  138:        if (col->data[i] == x)
    %%%%%:  138-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  139:            count++;
    %%%%%:  139-block  0
        -:  140:    }
    #####:  141:    return count;
    %%%%%:  141-block  0
        -:  142:}
