        -:    0:Source:C:/Users/maxco/OneDrive/Bureau/l1/C tuto/Project C/CDataFrame/CDataFrame/cdataframe.c
        -:    0:Graph:C:\Users\maxco\OneDrive\Bureau\l1\C tuto\Project C\CDataFrame\CDataFrame\cmake-build-debug-coverage\CMakeFiles\CDataFrame.dir\cdataframe.c.gcno
        -:    0:Data:C:\Users\maxco\OneDrive\Bureau\l1\C tuto\Project C\CDataFrame\CDataFrame\cmake-build-debug-coverage\CMakeFiles\CDataFrame.dir\cdataframe.c.gcda
        -:    0:Runs:1
        -:    1:#include "cdataframe.h"
        -:    2:#include "column.h"
        -:    3:#include "sort.h"
        -:    4:#include "double-linked-list.h"
        -:    5:#include <stdio.h>
        -:    6:#include <string.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
function create_cdataframe called 1 returned 100% blocks executed 100%
        1:   10:CDATAFRAME *create_cdataframe(int size){
        1:   11:    CDATAFRAME* cdf = (CDATAFRAME*)malloc(sizeof(CDATAFRAME));
        1:   12:    cdf->list_cdf = lst_create_list();
        1:   12-block  0
call    0 returned 1
        1:   13:    cdf->TL = 0;
        1:   14:    cdf->TP = size;
        1:   15:    return cdf;
        -:   16:};
        -:   17:
function fill_cdataframe_user_input called 0 returned 0% blocks executed 0%
    #####:   18:void fill_cdataframe_user_input(CDATAFRAME *cdf) {
    #####:   19:    if (!cdf)  //si rien
    %%%%%:   19-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   20:        return;
    %%%%%:   20-block  0
        -:   21:
        -:   22:    char title[100];
        -:   23:    int size, value;
        -:   24:
    #####:   25:    printf("Enter the size of the column: ");
    %%%%%:   25-block  0
call    0 never executed
    #####:   26:    scanf("%d", &size);
call    0 never executed
    #####:   27:    getchar(); // enlève l'espace
call    0 never executed
        -:   28:
    #####:   29:    printf("Enter the title of the column: ");
call    0 never executed
    #####:   30:    fgets(title, 100, stdin);
call    0 never executed
call    1 never executed
    #####:   31:    title[strcspn(title, "\n")] = 0; // Removing the newline character
        -:   32:
    #####:   33:    COLUMN *col = create_column(title);
call    0 never executed
        -:   34:
    #####:   35:    for (int i = 0; i < size; i++) {
    %%%%%:   35-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   36:        printf("Enter value for row %d: ", i);
    %%%%%:   36-block  0
call    0 never executed
    #####:   37:        scanf("%d", &value);
call    0 never executed
    #####:   38:        insert_value(col, value);
call    0 never executed
        -:   39:    }
        -:   40:
    #####:   41:    lst_insert_tail(cdf->list_cdf, lst_create_lnode(col));
    %%%%%:   41-block  0
call    0 never executed
call    1 never executed
        -:   42:}
        -:   43:
function fill_cdataframe_hard called 0 returned 0% blocks executed 0%
    #####:   44:void fill_cdataframe_hard(CDATAFRAME *cdf, int size, char *title, int *values) {
    #####:   45:    if (!cdf || size <= 0 || !title || !values)
    %%%%%:   45-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:   45-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:   45-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:   45-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    #####:   46:        return; //si rien
    %%%%%:   46-block  0
        -:   47:
    #####:   48:    COLUMN *col = create_column(title); // créer la colonne
    %%%%%:   48-block  0
call    0 never executed
        -:   49:
    #####:   50:    for (int i = 0; i < size; i++) {
    %%%%%:   50-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   51:        insert_value(col, values[i]); // insérer les valeurs normalement c'est bon
    %%%%%:   51-block  0
call    0 never executed
        -:   52:    }
        -:   53:
    #####:   54:    lst_insert_tail(cdf->list_cdf, lst_create_lnode(col));
    %%%%%:   54-block  0
call    0 never executed
call    1 never executed
        -:   55:}
        -:   56:
        -:   57:
function delete_cdf called 0 returned 0% blocks executed 0%
    #####:   58:void delete_cdf(CDATAFRAME **cdf){
    #####:   59:    lst_erase((*cdf)->list_cdf);
    %%%%%:   59-block  0
call    0 never executed
    #####:   60:    lst_delete_list((*cdf)->list_cdf);
call    0 never executed
    #####:   61:    free(*cdf);
    #####:   62:};
        -:   63:
function rename_column_cdf called 0 returned 0% blocks executed 0%
    #####:   64:void rename_column_cdf(CDATAFRAME *cdf, int col_num, char new_title[]) {
    #####:   65:    lnode* col_node = get_first_node(cdf->list_cdf);
    %%%%%:   65-block  0
call    0 never executed
    #####:   66:    COLUMN* col = col_node->data;
    #####:   67:    for (int i = 0; i < col_num; i++){
    %%%%%:   67-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   68:        col_node = get_next_node(cdf->list_cdf, col_node);
    %%%%%:   68-block  0
call    0 never executed
        -:   69:    };
    #####:   70:    col = col_node->data;
        -:   71:    col->title;
    #####:   72:    strcpy(col->title, new_title);
    #####:   73:};
        -:   74:
function add_column_cdf called 5 returned 100% blocks executed 85%
        5:   75:int add_column_cdf(CDATAFRAME *cdf, COLUMN *col){
        5:   76:    if(cdf->TL >= cdf->TP){
        5:   76-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####:   77:        printf("The CDataFrame is full !");
    %%%%%:   77-block  0
call    0 never executed
    #####:   78:        return 0;
        -:   79:    };
        5:   80:    if(cdf->TL == 0){
        5:   80-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1:   81:        lst_insert_head(cdf->list_cdf, lst_create_lnode(col));
        1:   81-block  0
call    0 returned 1
call    1 returned 1
        1:   82:        cdf->TL++;
        -:   83:    } else {
        4:   84:    lst_insert_after(cdf->list_cdf, lst_create_lnode(col), get_last_node(cdf->list_cdf));
        4:   84-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
        4:   85:    cdf->TL++;
        -:   86:    }
        5:   87:    return 1;
        5:   87-block  0
        -:   88:}
        -:   89:
function delete_column_cdf called 0 returned 0% blocks executed 0%
    #####:   90:void delete_column_cdf(CDATAFRAME *cdf, char *col_name){
    #####:   91:    lnode* col_node = get_first_node(cdf->list_cdf);
    %%%%%:   91-block  0
call    0 never executed
    #####:   92:    COLUMN* col = col_node->data;
    #####:   93:    for (int i = 0; i <= cdf->TL; i++){
    %%%%%:   93-block  0
    %%%%%:   93-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   94:        if (strcmp(col->title, col_name) == 0){
    %%%%%:   94-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   95:            delete_column(&col);
    %%%%%:   95-block  0
call    0 never executed
    #####:   96:            cdf->TL--;
        -:   97:        }
        -:   98:    }
    #####:   99:};
        -:  100:
        -:  101:
function add_row_cdf called 0 returned 0% blocks executed 0%
    #####:  102:int add_row_cdf(CDATAFRAME *cdf, int row[cdf->TL], int position) {
    #####:  103:    lnode* col_node = get_first_node(cdf->list_cdf);
    %%%%%:  103-block  0
call    0 never executed
        -:  104:    COLUMN* col;
        -:  105:    int i;
    #####:  106:    for (int j = 0; j < cdf->TL; j++) {
    %%%%%:  106-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  107:        col = col_node->data;
    #####:  108:        if (insert_value_at_position(col, row[j], position) == 0)
    %%%%%:  108-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  109:            return 0;
    %%%%%:  109-block  0
    #####:  110:        col_node = get_next_node(cdf->list_cdf, col_node);
    %%%%%:  110-block  0
call    0 never executed
        -:  111:    };
    #####:  112:    return 1;
    %%%%%:  112-block  0
        -:  113:};
        -:  114:
function delete_row_cdf called 0 returned 0% blocks executed 0%
    #####:  115:int delete_row_cdf(CDATAFRAME *cdf, int position) {
    #####:  116:    lnode* col_node = get_first_node(cdf->list_cdf);
    %%%%%:  116-block  0
call    0 never executed
        -:  117:    COLUMN* col;
        -:  118:    int i;
    #####:  119:    for (int j = 0; j < cdf->TL; j++) {
    %%%%%:  119-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  120:        col = col_node->data;
    #####:  121:        if (delete_value_at_position(col, position) == 0)
    %%%%%:  121-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  122:            return 0;
    %%%%%:  122-block  0
    #####:  123:        col_node = get_next_node(cdf->list_cdf, col_node);
    %%%%%:  123-block  0
call    0 never executed
        -:  124:    };
    #####:  125:    return 1;
    %%%%%:  125-block  0
        -:  126:};
        -:  127:
function get_cols_number_cdf called 0 returned 0% blocks executed 0%
    #####:  128:int get_cols_number_cdf(CDATAFRAME *cdf){
    #####:  129:    return cdf->TL;
    %%%%%:  129-block  0
        -:  130:};
        -:  131:
function get_rows_number_cdf called 0 returned 0% blocks executed 0%
    #####:  132:int get_rows_number_cdf(CDATAFRAME *cdf){
    #####:  133:    lnode* col_node = get_first_node(cdf->list_cdf);
    %%%%%:  133-block  0
call    0 never executed
    #####:  134:    COLUMN* col = col_node->data;
    #####:  135:    return col->TL;
        -:  136:};
        -:  137:
function search_value_cdf called 0 returned 0% blocks executed 0%
    #####:  138:void search_value_cdf(CDATAFRAME *cdf, int value){
    #####:  139:    lnode* col_node = get_first_node(cdf->list_cdf);
    %%%%%:  139-block  0
call    0 never executed
        -:  140:    COLUMN* col;
    #####:  141:    int existence = 0;
    #####:  142:    for(int i = 0; i < cdf->TL; i++){
    %%%%%:  142-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  143:        col = col_node->data;
    #####:  144:        for(int j = 0; j <= col->TL; j++){
    %%%%%:  144-block  0
    %%%%%:  144-block  1
    %%%%%:  144-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  145:            if (col->data[j] == value){
    %%%%%:  145-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  146:                existence = 1;
    #####:  147:                printf("The value %d was founded in row %d column %d", value, j, i);
    %%%%%:  147-block  0
call    0 never executed
    #####:  148:                printf("\n");
call    0 never executed
        -:  149:            }
        -:  150:        };
    #####:  151:        col_node = get_next_node(cdf->list_cdf, col_node);
    %%%%%:  151-block  0
call    0 never executed
        -:  152:    };
    #####:  153:    if (existence == 0) {
    %%%%%:  153-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  154:        printf("No value %d was founded !", value);
    %%%%%:  154-block  0
call    0 never executed
    #####:  155:        printf("\n");
call    0 never executed
        -:  156:    };
    #####:  157:};
        -:  158:
function access_and_replace_value_by_pos called 0 returned 0% blocks executed 0%
    #####:  159:int access_and_replace_value_by_pos(CDATAFRAME *cdf, int new_value, int row, int column){
    #####:  160:    lnode* col_node = get_first_node(cdf->list_cdf);
    %%%%%:  160-block  0
call    0 never executed
    #####:  161:    COLUMN* col = col_node->data;
    #####:  162:    if (row > col->TL || column > cdf->TL)
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  162-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  163:        return 0;
    %%%%%:  163-block  0
    #####:  164:    for(int i = 0; i < cdf->TL; i++) {
    %%%%%:  164-block  0
    %%%%%:  164-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  165:        col = col_node->data;
    #####:  166:        for (int j = 0; j <= col->TL; j++) {
    %%%%%:  166-block  0
    %%%%%:  166-block  1
    %%%%%:  166-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  167:            if (j == row && i == column) {
    %%%%%:  167-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  167-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  168:                col->data[j] = new_value;
    #####:  169:                return 1;
    %%%%%:  169-block  0
        -:  170:            };
        -:  171:        };
    #####:  172:        col_node = get_next_node(cdf->list_cdf, col_node);
    %%%%%:  172-block  0
call    0 never executed
        -:  173:    };
    #####:  174:};
    %%%%%:  174-block  0
        -:  175:
function print_rows_cdf called 0 returned 0% blocks executed 0%
    #####:  176:void print_rows_cdf(CDATAFRAME *cdf, int start, int end){
        -:  177:    lnode* col_node;
        -:  178:    COLUMN* col;
    #####:  179:    for (int j = start; j <= end; j++) {
    %%%%%:  179-block  0
    %%%%%:  179-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  180:        printf("[%d] ", j);
    %%%%%:  180-block  0
call    0 never executed
    #####:  181:        col_node = get_first_node(cdf->list_cdf);
call    0 never executed
    #####:  182:        for (int i = 0; i < cdf->TL; i++) {
    %%%%%:  182-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  183:            col = col_node->data;
    #####:  184:            if (0 <= col->data[j] && col->data[j] <= 9) {
    %%%%%:  184-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  184-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  185:                printf(" %d  ", col->data[j]);
    %%%%%:  185-block  0
call    0 never executed
        -:  186:            } else {
    #####:  187:                printf("%d  ", col->data[j]);
    %%%%%:  187-block  0
call    0 never executed
        -:  188:            };
    #####:  189:            col_node = get_next_node(cdf->list_cdf, col_node);
    %%%%%:  189-block  0
call    0 never executed
        -:  190:        };
    #####:  191:        printf("\n");
    %%%%%:  191-block  0
call    0 never executed
        -:  192:    };
    #####:  193:};
        -:  194:
function print_cols_cdf called 0 returned 0% blocks executed 0%
    #####:  195:void print_cols_cdf(CDATAFRAME *cdf, int start, int end) {
    #####:  196:    COLUMN* col_list[end-start];
    #####:  197:    lnode* col_node = get_first_node(cdf->list_cdf);
    %%%%%:  197-block  0
call    0 never executed
    #####:  198:    COLUMN* col = col_node->data;
    #####:  199:    int number_rows = get_rows_number_cdf(cdf);
call    0 never executed
    #####:  200:    for (int k = start; k <= end; k++){
    %%%%%:  200-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  201:        printf("[%d] ", k);
    %%%%%:  201-block  0
call    0 never executed
        -:  202:    };
    #####:  203:    printf("\n");
    %%%%%:  203-block  0
call    0 never executed
    #####:  204:    for (int i = 0; i < start; i++){
    %%%%%:  204-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  205:        col_node = get_next_node(cdf->list_cdf, col_node);
    %%%%%:  205-block  0
call    0 never executed
        -:  206:    };
    #####:  207:    col = col_node->data;
    #####:  208:    for (int z = 0; z <= end-start; z++){
    %%%%%:  208-block  0
    %%%%%:  208-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  209:        col_list[z] = col;
    #####:  210:        col_node = get_next_node(cdf->list_cdf, col_node);
    %%%%%:  210-block  0
call    0 never executed
    #####:  211:        col = col_node->data;
        -:  212:    };
    #####:  213:    for (int y = 0; y < number_rows; y++){
    %%%%%:  213-block  0
    %%%%%:  213-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  214:        for (int j = 0; j <= end-start; j++) {
    %%%%%:  214-block  0
    %%%%%:  214-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  215:            printf(" %d ", col_list[j]->data[y]);
    %%%%%:  215-block  0
call    0 never executed
        -:  216:        };
    #####:  217:        printf("\n");
    %%%%%:  217-block  0
call    0 never executed
        -:  218:    };
    #####:  219:};
        -:  220:
function print_columns_title called 0 returned 0% blocks executed 0%
    #####:  221:void print_columns_title(CDATAFRAME *cdf){
    #####:  222:    lnode* col_node = get_first_node(cdf->list_cdf);
    %%%%%:  222-block  0
call    0 never executed
    #####:  223:    COLUMN* col = col_node->data;
    #####:  224:    for (int i = 0; i < cdf->TL; i++){
    %%%%%:  224-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  225:        printf("[%d] %s", i, col->title);
    %%%%%:  225-block  0
call    0 never executed
    #####:  226:        if (i < cdf->TL - 1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  227:            col_node = get_next_node(cdf->list_cdf, col_node);
    %%%%%:  227-block  0
call    0 never executed
    #####:  228:            col = col_node->data;
        -:  229:        };
    #####:  230:        printf("\n");
    %%%%%:  230-block  0
call    0 never executed
        -:  231:    };
    #####:  232:};
        -:  233:
function print_cdf called 0 returned 0% blocks executed 0%
    #####:  234:void print_cdf(CDATAFRAME *cdf){
    #####:  235:    lnode* col_node = get_first_node(cdf->list_cdf);
    %%%%%:  235-block  0
call    0 never executed
    #####:  236:    COLUMN* col = col_node->data;
    #####:  237:    printf("    ");
call    0 never executed
    #####:  238:    for (int j = 0; j < cdf->TL; j++) {
    %%%%%:  238-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  239:        printf("[%d] ", j);
    %%%%%:  239-block  0
call    0 never executed
        -:  240:    }
    #####:  241:    printf("\n");
    %%%%%:  241-block  0
call    0 never executed
    #####:  242:    print_rows_cdf(cdf, 0, col->TL - 1);
call    0 never executed
    #####:  243:};
        -:  244:
function load_from_csv called 0 returned 0% blocks executed 0%
    #####:  245:CDATAFRAME* load_from_csv(const char *file_name, int size_col){
    #####:  246:    FILE* f = fopen(file_name, "r");
    %%%%%:  246-block  0
call    0 never executed
        -:  247:    char line[1000];
        -:  248:    char *data;
    #####:  249:    int line_array[size_col];
        -:  250:    int data_int;
    #####:  251:    int row = 0;
        -:  252:    int i;
    #####:  253:    CDATAFRAME* cdf = create_cdataframe(size_col);
call    0 never executed
        -:  254:
    #####:  255:    if (f == NULL){
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  256:        printf("Error: could not open file (%s)\n", strerror(errno));
    %%%%%:  256-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  257:        exit(-1);
call    0 never executed
        -:  258:    };
        -:  259:
        -:  260:    COLUMN* col;
    #####:  261:    for (int j = 0; j < size_col; j++){
    %%%%%:  261-block  0
    %%%%%:  261-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  262:        col = create_column("Column");
    %%%%%:  262-block  0
call    0 never executed
    #####:  263:        add_column_cdf(cdf, col);
call    0 never executed
        -:  264:    };
        -:  265:
        -:  266:
    #####:  267:    while (fgets(line, sizeof(line),f)){
    %%%%%:  267-block  0
    %%%%%:  267-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -:  268:
    #####:  269:        data = strtok(line, ";");
    %%%%%:  269-block  0
call    0 never executed
    #####:  270:        sscanf(data, "%d", &data_int);
call    0 never executed
    #####:  271:        line_array[0] = data_int;
        -:  272:
        -:  273:
    #####:  274:        for (i = 1; i < size_col; i++){
    %%%%%:  274-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  275:            data = strtok(NULL, ";");
    %%%%%:  275-block  0
call    0 never executed
    #####:  276:            sscanf(data, "%d", &data_int);
call    0 never executed
    #####:  277:            line_array[i] = data_int;
        -:  278:        };
        -:  279:
    #####:  280:        line_array[i] = data_int;
        -:  281:
    #####:  282:        add_row_cdf(cdf, line_array, row);
    %%%%%:  282-block  0
call    0 never executed
    #####:  283:        row++;
        -:  284:    };
    #####:  285:    fclose(f);
    %%%%%:  285-block  0
call    0 never executed
    #####:  286:    return cdf;
        -:  287:};
        -:  288:
function save_into_csv called 0 returned 0% blocks executed 0%
    #####:  289:void save_into_csv(CDATAFRAME *cdf, char *file_name){
    #####:  290:    FILE* f = fopen(file_name, "w+");
    %%%%%:  290-block  0
call    0 never executed
    #####:  291:    int nb_row = get_rows_number_cdf(cdf);
call    0 never executed
        -:  292:
    #####:  293:    if (f == NULL){
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  294:        printf("Error: could not open file (%s)\n", strerror(errno));
    %%%%%:  294-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  295:        exit(-1);
call    0 never executed
        -:  296:    };
        -:  297:
        -:  298:
    #####:  299:    for (int j = 0; j < nb_row; j++) {
    %%%%%:  299-block  0
    %%%%%:  299-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  300:        lnode* col_node = get_first_node(cdf->list_cdf);
    %%%%%:  300-block  0
call    0 never executed
        -:  301:        COLUMN* col;
        -:  302:
    #####:  303:        for (int i = 0; i < cdf->TL - 1; i++) {
    %%%%%:  303-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  304:            col = col_node->data;
    #####:  305:            fprintf(f, "%d;", col->data[j]);
    %%%%%:  305-block  0
call    0 never executed
    #####:  306:            col_node = get_next_node(cdf->list_cdf, col_node);
call    0 never executed
        -:  307:        };
        -:  308:
    #####:  309:        col = col_node->data;
    #####:  310:        fprintf(f, "%d", col->data[j]);
    %%%%%:  310-block  0
call    0 never executed
    #####:  311:        fprintf(f, "\n");
call    0 never executed
        -:  312:    };
    #####:  313:};
