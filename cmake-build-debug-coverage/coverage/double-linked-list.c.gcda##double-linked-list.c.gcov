        -:    0:Source:C:/Users/maxco/OneDrive/Bureau/l1/C tuto/Project C/CDataFrame/CDataFrame/double-linked-list.c
        -:    0:Graph:C:\Users\maxco\OneDrive\Bureau\l1\C tuto\Project C\CDataFrame\CDataFrame\cmake-build-debug-coverage\CMakeFiles\CDataFrame.dir\double-linked-list.c.gcno
        -:    0:Data:C:\Users\maxco\OneDrive\Bureau\l1\C tuto\Project C\CDataFrame\CDataFrame\cmake-build-debug-coverage\CMakeFiles\CDataFrame.dir\double-linked-list.c.gcda
        -:    0:Runs:1
        -:    1:#include "double-linked-list.h"
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:
        -:    6:
function lst_create_lnode called 5 returned 100% blocks executed 100%
        5:    7:lnode *lst_create_lnode(void *dat) {
        5:    8:    lnode *ptmp = (lnode *) malloc(sizeof(lnode));
        5:    9:    ptmp->data = dat;
        5:   10:    ptmp->next = NULL;
        5:   11:    ptmp->prev = NULL;
        5:   12:    return ptmp;
        5:   12-block  0
        -:   13:}
function lst_create_list called 1 returned 100% blocks executed 100%
        1:   14:list *lst_create_list() {
        1:   15:    list *lst = (list *) malloc(sizeof(list));
        1:   16:    lst->head = NULL;
        1:   17:    lst->tail = NULL;
        1:   18:    return lst;
        1:   18-block  0
        -:   19:}
function lst_delete_list called 0 returned 0% blocks executed 0%
    #####:   20:void lst_delete_list(list * lst) {
    #####:   21:    lst_erase(lst);
    %%%%%:   21-block  0
call    0 never executed
    #####:   22:    free(lst);
    #####:   23:}
function lst_insert_head called 1 returned 100% blocks executed 75%
        1:   24:void lst_insert_head(list * lst, lnode * pnew) {
        1:   25:    if (lst->head == NULL) {
        1:   25-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   26:        lst->head = pnew;
        1:   27:        lst->tail = pnew;
        1:   28:        return;
        1:   28-block  0
        -:   29:    }
    #####:   30:    pnew->next = lst->head;
    #####:   31:    pnew->prev = NULL;
    #####:   32:    lst->head = pnew;
    #####:   33:    pnew->next->prev = pnew;
    %%%%%:   33-block  0
        -:   34:}
function lst_insert_tail called 4 returned 100% blocks executed 75%
        4:   35:void lst_insert_tail(list * lst, lnode * pnew) {
        4:   36:    if (lst->head == NULL) {
        4:   36-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:   37:        lst->head = pnew;
    #####:   38:        lst->tail = pnew;
    #####:   39:        return;
    %%%%%:   39-block  0
        -:   40:    }
        4:   41:    pnew->next = NULL;
        4:   42:    pnew->prev = lst->tail;
        4:   43:    lst->tail = pnew;
        4:   44:    pnew->prev->next = pnew;
        4:   44-block  0
        -:   45:}
function lst_insert_after called 4 returned 100% blocks executed 62%
        4:   46:void lst_insert_after(list * lst, lnode * pnew, lnode * ptr) {
        4:   47:    if (lst->head == NULL) {
        4:   47-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:   48:        lst->head = pnew;
    #####:   49:        lst->tail = pnew;
    %%%%%:   49-block  0
        4:   50:    } else if (ptr == NULL) {
        4:   50-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:   51:        return;
    %%%%%:   51-block  0
        4:   52:    } else if (lst->tail == ptr) {
        4:   52-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   53:        lst_insert_tail(lst, pnew);
        4:   53-block  0
call    0 returned 4
        -:   54:    } else {
    #####:   55:        pnew->next = ptr->next;
    #####:   56:        pnew->prev = ptr;
    #####:   57:        pnew->next->prev = pnew;
    #####:   58:        pnew->prev->next = pnew;
    %%%%%:   58-block  0
        -:   59:    }
        -:   60:}
function lst_delete_head called 0 returned 0% blocks executed 0%
    #####:   61:void lst_delete_head(list * lst) {
    #####:   62:    if (lst->head->next == NULL) {
    %%%%%:   62-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   63:        free(lst->head);
    #####:   64:        lst->head = NULL;
    #####:   65:        lst->tail = NULL;
    #####:   66:        return;
    %%%%%:   66-block  0
        -:   67:    }
    #####:   68:    lst->head = lst->head->next;
    #####:   69:    free(lst->head->prev);
    #####:   70:    lst->head->prev = NULL;
    %%%%%:   70-block  0
        -:   71:}
function lst_delete_tail called 0 returned 0% blocks executed 0%
    #####:   72:void lst_delete_tail(list * lst) {
    #####:   73:    if (lst->tail->prev == NULL) {
    %%%%%:   73-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   74:        free(lst->tail);
    #####:   75:        lst->head = NULL;
    #####:   76:        lst->tail = NULL;
    #####:   77:        return;
    %%%%%:   77-block  0
        -:   78:    }
    #####:   79:    lst->tail = lst->tail->prev;
    #####:   80:    free(lst->tail->next);
    #####:   81:    lst->tail->next = NULL;
    %%%%%:   81-block  0
        -:   82:}
function lst_delete_lnode called 0 returned 0% blocks executed 0%
    #####:   83:void lst_delete_lnode(list * lst, lnode * ptr) {
    #####:   84:    if (ptr == NULL)
    %%%%%:   84-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   85:        return;
    %%%%%:   85-block  0
    #####:   86:    if (ptr == lst->head) {
    %%%%%:   86-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   87:        lst_delete_head(lst);
    %%%%%:   87-block  0
call    0 never executed
    #####:   88:        return;
        -:   89:    }
    #####:   90:    if (ptr == lst->tail) {
    %%%%%:   90-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   91:        lst_delete_tail(lst);
    %%%%%:   91-block  0
call    0 never executed
    #####:   92:        return;
        -:   93:    }
    #####:   94:    ptr->next->prev = ptr->prev;
    #####:   95:    ptr->prev->next = ptr->next;
    #####:   96:    free(ptr);
    %%%%%:   96-block  0
        -:   97:}
function lst_erase called 0 returned 0% blocks executed 0%
    #####:   98:void lst_erase(list * lst) {
    #####:   99:    if (lst->head == NULL)
    %%%%%:   99-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  100:        return;
    %%%%%:  100-block  0
    #####:  101:    while (lst->head != lst->tail) {
    %%%%%:  101-block  0
    %%%%%:  101-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  102:        lst->head = lst->head->next;
    #####:  103:        free(lst->head->prev);
    %%%%%:  103-block  0
        -:  104:    }
    #####:  105:    free(lst->head);
    #####:  106:    lst->head = NULL;
    #####:  107:    lst->tail = NULL;
    %%%%%:  107-block  0
        -:  108:}
function get_first_node called 0 returned 0% blocks executed 0%
    #####:  109:lnode *get_first_node(list * lst) {
    #####:  110:    if (lst->head == NULL)
    %%%%%:  110-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  111:        return NULL;
    %%%%%:  111-block  0
    #####:  112:    return lst->head;
    %%%%%:  112-block  0
        -:  113:}
function get_last_node called 4 returned 100% blocks executed 75%
        4:  114:lnode *get_last_node(list * lst) {
        4:  115:    if (lst->tail == NULL)
        4:  115-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  116:        return NULL;
    %%%%%:  116-block  0
        4:  117:    return lst->tail;
        4:  117-block  0
        -:  118:}
function get_next_node called 0 returned 0% blocks executed 0%
    #####:  119:lnode *get_next_node(list * lst, lnode * lnode) {
    #####:  120:    if (lnode == NULL)
    %%%%%:  120-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  121:        return NULL;
    %%%%%:  121-block  0
    #####:  122:    return lnode->next;
    %%%%%:  122-block  0
        -:  123:}
function get_previous_elem called 0 returned 0% blocks executed 0%
    #####:  124:void *get_previous_elem(list * lst, lnode * lnode) {
    #####:  125:    if (lnode == NULL)
    %%%%%:  125-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  126:        return NULL;
    %%%%%:  126-block  0
    #####:  127:    return lnode->prev;
    %%%%%:  127-block  0
        -:  128:}
